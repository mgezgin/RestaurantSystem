stages:
# - cache
- test

# create_cache:
#   stage: cache
#   image: mcr.microsoft.com/dotnet/sdk:9.0
#   variables:
#     NUGET_PACKAGES: "$CI_PROJECT_DIR/.nuget/packages"
#   script:
#     - dotnet restore RestaurantSystem.sln --packages "$NUGET_PACKAGES"
#   cache:
#     key: "$CI_COMMIT_REF_SLUG"
#     paths:
#       - .nuget/packages/
#     policy: push

dotnet_test:
  image: mcr.microsoft.com/dotnet/sdk:9.0
  stage: test
  # cache:
  #   key: "$CI_COMMIT_REF_SLUG"
  #   paths:
  #     - ~/.nuget/packages/
  #   policy: pull
  before_script:
    - dotnet restore RestaurantSystem.sln
  script:
    - dotnet test RestaurantSystem.sln --logger:"console;verbosity=normal"

# gitleaks is detecting hardcoded secrets in app source code

gitleaks:
  stage: test
  image:
    name: zricethezav/gitleaks
    entrypoint: [""]
  script:
    - gitleaks detect --verbose --source .


# Static Application Security Test (SAST)
# In this job, GitLab's template job is used

sast:
  stage: test

include:
  - template: Jobs/SAST.gitlab-ci.yml
  

# Docker Image building 

build_image:
    stage: build
    image: docker:24
    services:
    - docker:24-dind
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - docker build -t $IMAGE_NAME:$IMAGE_TAG ./RestaurantSystem.Api
        - docker push $IMAGE_NAME:$IMAGE_TAG

# Docker Image Scanning for security vulnerabilities and misconfigurations
# Trivy tool is used

trivy:
  stage: build
  needs: ["build_image"]
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IMAGE_NAME:$IMAGE_TAG
    - trivy image --severity HIGH,CRITICAL --exit-code 1 $IMAGE_NAME:$IMAGE_TAG


